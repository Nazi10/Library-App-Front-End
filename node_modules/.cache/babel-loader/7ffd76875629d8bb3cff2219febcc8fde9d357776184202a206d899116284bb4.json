{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable no-bitwise */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenerateGuidV4 = exports.isUint8ArrayValidGuid = exports.isStringValidGuid = exports.uint8ArrayToString = exports.stringToUint8Array = exports.ARRAY_LENGTH = void 0;\nexports.ARRAY_LENGTH = 16;\nconst BYTE_ORDER = [3, 2, 1, 0, 5, 4, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15];\n/**\r\n * Regex to validate the given GUID accept all the UUIDs version.\r\n */\nconst regxValidator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\n/**\r\n * Convert the given number to a Hexa format.\r\n * @param value The number to be converted\r\n */\nfunction convertNumberToHexa(value) {\n  let hex = value <= 0xf ? '0' : '';\n  hex += value.toString(exports.ARRAY_LENGTH);\n  return hex;\n}\n/**\r\n * Convert the given {string} to a {Uint8Array} value.\r\n * @param value String value of the Guid.\r\n */\nfunction stringToUint8Array(value) {\n  // Strip any separatorsor un-wanted chars.\n  const regExp = new RegExp('[{}()-]', 'g');\n  const guid = value.replace(regExp, '');\n  const bytes = [];\n  for (let i = 0; i < exports.ARRAY_LENGTH; i++) {\n    const pos = BYTE_ORDER[i];\n    const b1 = guid.charAt(pos * 2);\n    const b2 = guid.charAt(pos * 2 + 1);\n    const charAt = unescape(`%${b1}${b2}`).charCodeAt(0);\n    bytes.push(charAt);\n  }\n  return new Uint8Array(bytes);\n}\nexports.stringToUint8Array = stringToUint8Array;\n/**\r\n * Convert the given {Uint8Array} to a {string} value.\r\n *\r\n * @param value Byte Array value of the Guid.\r\n */\nfunction uint8ArrayToString(value) {\n  let guid = '';\n  for (let i = 0; i < exports.ARRAY_LENGTH; i++) {\n    // Decide if we need to add the Hyphen {-} in the Guid.\n    guid += i === 4 || i === 6 || i === 8 || i === 10 ? '-' : '';\n    const pos = BYTE_ORDER[i];\n    guid += convertNumberToHexa(value[pos]);\n  }\n  return guid;\n}\nexports.uint8ArrayToString = uint8ArrayToString;\n/**\r\n * Validate that the given value is a valid GUID.\r\n * @param guid The value to be validated.\r\n */\nfunction isStringValidGuid(guid) {\n  if (!guid) {\n    return false;\n  }\n  return regxValidator.test(guid);\n}\nexports.isStringValidGuid = isStringValidGuid;\n/**\r\n * Validate that the given value is a valid GUID.\r\n * @param guid The value to be validated.\r\n */\nfunction isUint8ArrayValidGuid(guid) {\n  const strGuid = uint8ArrayToString(guid);\n  return guid && regxValidator.test(strGuid);\n}\nexports.isUint8ArrayValidGuid = isUint8ArrayValidGuid;\n/**\r\n * Generate a random v4 GUID.\r\n */\nfunction GenerateGuidV4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (char) {\n    const random = Math.random() * 16 | 0;\n    const v = char === 'x' ? random : random & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nexports.GenerateGuidV4 = GenerateGuidV4;","map":{"version":3,"mappings":"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","names":["exports","BYTE_ORDER","regxValidator","RegExp","convertNumberToHexa","value","hex","toString","stringToUint8Array","regExp","guid","replace","bytes","i","pos","b1","charAt","b2","unescape","charCodeAt","push","Uint8Array","uint8ArrayToString","isStringValidGuid","test","isUint8ArrayValidGuid","strGuid","GenerateGuidV4","char","random","Math","v"],"sources":["../src/guid.helpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}